
Page Layout in Gallery 2.0

======================================================================
Page layout basically happens in two steps:
 1. The application generates all of the data required in the 
    requested page.
 2. This data, in the form of a multi-level array and called the Gallery
    Layout Object (or GLO), is passed to the Layout Engine for display.

The User Interface of Gallery 2.0 allows for a number of levels of
customization.

The Gallery administrator can:
* download Layout Engines from the Gallery website, and make them 
  available to album admins [no knowledge of HTML or PHP required].
* specify two blocks of HTML content, one placed above and the other
  below all Gallery pagesi [basic understanding of HTML required].
* create his/her own Layout Engine [basic understanding of PHP and
  HTML required].

The Album administrator (each album has its own admin, and its own
settings) can:
* choose from the "Layout Engines" provided by the Gallery
  administrator. The Layout Engine controls the actual layout of the
  album page content [no knowledge of HTML or PHP required].
* specify two blocks of HTML content, one placed above and the other
  below all album specific content in the album pages [basic
  understanding of HTML required].

The Layoue Engine is similar in functionality to a "theme" in an
application like phpNuke. One important difference is themes in these
applications control the layout of the page as well as any 
customization required by your site. You are required to 
customize a theme to customize your site. It is still possible to
customize a Layout Engine, but for most users, this will not be 
necessary.

Page Layers:
======================================================================
A Gallery page is made up of it's content (generated by the Layout
Engine), wrapped by three "layers":

     -------------------------------------------------------
    |                                                       |
    | (1) [App] Embedded Header                             |
    |                                                       |
    |  ---------------------------------------------------  |
    | |                                                   | |
    | | (2) [App/Layout Engine] Gallery-wide Header       | |
    | |                                                   | |
    | |  -----------------------------------------------  | | 
    | | |                                               | | | 
    | | | (3) [App/Layout Engine] Album-wide Header     | | | 
    | | |                                               | | |
    | | |  -------------------------------------------  | | | 
    | | | |                                           | | | | 
    | | | |                                           | | | |
    | | | | (4) [Layout Engine] The Page Content      | | | | 
    | | | |                                           | | | | 
    | | | |                                           | | | |
    | | |  -------------------------------------------  | | | 
    | | |                                               | | | 
    | | | (3) [App/Layout Engine] Album-wide Footer     | | | 
    | | |                                               | | | 
    | |  -----------------------------------------------  | | 
    | |                                                   | | 
    | | (2) [App/Layout Engine] Gallery-wide Footer       | | 
    | |                                                   | |
    |  ---------------------------------------------------  | 
    |                                                       | 
    | (1) [App] Embedded Footer                             | 
    |                                                       | 
     -------------------------------------------------------

The Layers:

(1) Embedded Header/Footer
    
    This content is controlled by the App, and is output
    outside of the scope of the Layout. It is here that content
    appropriate to being embedded in an application like Nuke
    is located.

(2) Gallery-wide Header/Footer

    These blocks appear on every page, in every album in the 
    Gallery.

    These HTML blocks are loaded from the html_wrap directory (as
    entered by the Gallery Administrator). The App loads this data 
    and inserts it in the GLO. The Layout is responsible for putting 
    this header and footer in the right place. These blocks are 
    parsed using the xtpl template engine, and have special 
    "standalone_only" sub-blocks that are only parsed in the case 
    that the Gallery is not embedded in an application such as Nuke.
    Refer to the html_wrap/header_footer.xtpl.default for a more
    complete discussion on its use.

    This layer has available to it a mini version of the GLO. See
    below.

(3) Album-wide Header/Footer

    These blocks appear on every page, in the current album.

    These HTML blocks are loaded from the Album object, the 
    current Album (as entered by the Album Administrator). The App
    loads this data and inserts it in the GLO. The Layout is 
    responsible for putting this header and footer in the right 
    place.

    This layer has available to it...um, nothing officially, in terms
    of app data yet [[coming soon]]. 

(4) Page Content

    The App loads any data necessary for page display in the GLO. The
    Layout can do whatever it wants with this data.


The Gallery Layout Object (GLO)
======================================================================
The content of this object varies depending on what page is being 
rendered. The GLO content for each page is defined below. For the 
sake of brevity I will use the following abbreviation for array
structure:

  $GLO['something']['other']['thing'] => GLO.something.other.thing

----------------------------------------------------------------------
--- view_album.php ---

GLO.gallery
  .title              => The title of the Gallery
  .url                => The URL to the top level of the Gallery

GLO.album
  .title              => The title of the album
  .url                => The URL to the album.
  .name               => The album name (maps to it's directory)
  .borderSize         => Width of image borders.

  .thumbnailSize      => Size of thumbnail images.
  .rows               => Rows of thumbnails per page.
  .cols               => Columns of thumbnails per page. 
  .displayClicks      => [1, 0] whether or not click counts should be
                         displayed.
  .html_header        => The header block for the album.
  .html_footer        => The footer block for the album.
  .items              => array of items to be displayed on the page.
    .<<i>>           (where i is the iterator, 1 -> #items on page)
      .id             => the id of the item.
      .index          => item's index in the album
      .hidden         => [1, 0] whether or not the item is hidden.
      .thumbnail      => the thumbnail data for the item.
        .url          => the url to the thumbnail image.
        .width        => the width of the thumbnail image.
        .height       => the height of the thumbnail image.

      .type           => the item type [photo, album, movie] 
      .href           => url to the item's page.
      .title          => the title of the item.
      .description    => the description of the item.
      .dateChanged    => modification date
      .clickCount     => number fo times viewed.
      .clickCountText => text string representing number of times viewed.
      .itemCountText  => [album only] number of child items.
      .commands       => Array of commands available for the item. This
                         array is indexed by command name.
        .<<name>>     => The name of the command
          .title      => The label for the command
          .href       => The action url for the command.
  
GLO.toolbox           => Tools available to the user.
  .commands           => The array of tools.
    .<<name>>         => Index off of command name.
      .title          => The name of the command, like "Login"
      .href           => The action url for the command.

GLO.breadcrumb        => The data necessary to construct a breadcrumb.
  .levels             => array of breadcrumb levels (top at the start).
   .<<i>>             => zero based index.
     .level           => The type of level. Currently just "Album".
     .name            => Name, as in Album Title.
     .href            => Url to the level.

GLO.navigator         => The data necessary to construct navigation.
  .pages              => Array of pages in the album.
    .<<i>>            => 1 based index of pages. 
      .name           => Name of the page, like "Page 3" 
      .href           => The Url to the page.
  .pageNumber         => The page number.
  .pageLabel          => what 'kind' of page it is, like "Page"

GLO.page.body.extra   => app generated html content that must be 
                         put inside the body tags. [this will likely
                         be removed soon].

GLO.pixelImage        => image tag pointing to a 1 pixel transparent
                         gif. Nice to have.
GLO.version           => the version number of the GLO itself.

----------------------------------------------------------------------
--- view_item.php ---

[[ coming soon ]]

----------------------------------------------------------------------
--- search.php ---

[[ coming soon ]]

----------------------------------------------------------------------
--- edit.php ---

[[ coming soon ]]


The Gallery-wide Limited Layout Object (G)
======================================================================
This is like a mini-GLO, for use by the Gallery-wide header/footer.
It is provided so that is is not required to understand the GLO
to be able to work with the Gallery-wide header/footers. This mini-GLO
has a subset of the GLO, data most likely of use to this audience.

G.TITLE                    => The title of the Gallery, as defined in 
                              the configuration wizard.
G.HEAD.EXTRA               => App generated HTML content that *must*
                              be places inside the <head> block.
G.HEAD.STYLESHEET_INCLUDE  => App generated HTML that links the page
                              to the Gallery style sheets. This *must*
                              be placed in the <head> block.
G.BODYTAG.EXTRA            => App generated string that *must* be 
                              placed inside the <body> tag itself.
G.GALLERY_PROJECT.VERSION  => The Gallery project version
G.PIXEL_IMAGE              => Image tag pointing to a 1 pixel
                              transparent gif. Nice to have.
G.VERSION                  => The version number of the G objct itself.

The Layout Object versioning scheme
======================================================================
As the Gallery application develops, the contents of the GLO and G 
may change. The 'version' value in the GLO and G will be updated with
every Gallery release that results in a change of the GLO or G.

The Layout Engine can check this value to ... um, you know...

[[ some way to version the Layout Engines. some sort of Layout ]]
[[ engine certification???                                     ]]


= = = = = = = = = = = = = = = = = =
OTHER IDEAS:
* A way to give the Layout Engine properties that the app can query. 
  The app would use these queries to help determine what special data
  might be required in the GLO
* Maybe the album should have distinct custon html for the album page
  AND the item page... 


