GALLERY CONFIG WIZARD REQUIREMENTS
----------------------------------
$Id$
----------------------------------

0. Overview.

The config wizard will be most users' first interaction with Gallery.
At this point, many users will not be convinced that they even want to
use Gallery, so if they hit even a simple roadblock they may give up
and go elsewhere.  So it's very important that the config wizard
provide as much (or as little) explanation of what's happening as
necessary to make the user's experience enjoyable.

Setup wizards that we will want to emulate to some extent:
 * IMP
 * SquirrelMail

Also note that it's not necessary to maintain the same config API in
v2.0 as we had in v1.2.  It's better to think outside the box and come
up with a new set of variable names that are cleanly and logically
grouped so that we are clean moving forward.  We have 3,000 users
behind us and 300,000 ahead of us. 


1. Download and configure

To prevent race conditions (and more than one user configuring Gallery
at a given time), the configure.sh and configure.bat file will ask for
a password token that will be required for successfully entering the
config wizard. The URL will be part of the initial setup.php request
(as http://localhost/gallery/setup.php?password) that is echoed by
these scripts. BTW: I'd love to have "comprehensible" verbage for
describing this to the user running configure.sh.

REVISIT (2001-11-27 21:31 mrm): I'm thinking I will let "no password"
be default for configure.bat - and let the .sh script first check for
something automated and secure, like md5 or some such, so I don't have
to ask the user for a passwd.

The shell script will also see if wget is available, and ask the user
if it can try to fetch the image toolkit binaries (if they aren't in
the path) and stuff them someplace "standard" to Gallery. Remind users
about proper settings for http_proxy and the like. To be really sexy,
if we see that the thing is a Debian box, ask the user to apt-get
install ImageMagick as root (rather than have a local,
Gallery-specific installation that isn't package-managed).

If the shell script doesn't do this, the user's flow will be

* download gallery.tgz
* untar
* read README
* run configure.sh
* get a browser pointing at .../setup/start.php?328924

and then find out that they need three more tools (say, jhead,
IMagick, and some movie tool).


2. Welcome

The first stage of the wizard should welcome you to the product and
describe what's going to happen.  It should provide a link to Gallery
resources on the net that the user can turn to if there are any
problems during the installation.

REVISIT: do we need to display the license here? Are we distributing
under PHP or GPL (We may not be able to live in PEAR if we don't use
the PHP license).


3. System Check.

At this stage we will check your system to make sure that it's got the
essentials necessary to support Gallery.  Each of the checks below
should be a module, and there should be an API so that we can add new
modules to the config wizard at any time (including accepting ones
from outside contributors).  The core modules:

 * You're using a supported webserver
   - Check for .htaccess support, if applicable
   - Check for mod-rewrite support, if applicable

 * You're using a supported version of PHP

 * You have one or more supported Graphics toolkits installed
   - Check the version of the toolkit (XXX >? !=?)
   - Check for jhead (technically, this should be part of the toolkit
     or part of PHP)

Each module should be able to:
 * Read it's default state from the existing config file
 * Have a generic "unit test" method that succeeds or fails
 * Be optional (warning errors) or mandatory (fatal errors)
 * Return an informative success, warning or error message as
   appropriate. Errors must point to an appropriate FAQ section.


4. System configuration

We should now have a series of configuration pages, each containing a
logically grouped set of requests.  For example, we should have a page
entitled "Helper Applications" which asks for the path to both the unzip
and zipinfo binaries.

Each page should show data from a configuration module, and we should
be able to add new configuration modules at any time (including
accepting ones from outside contributors).  The core modules:

  * Admin configuration
    - admin password

  * Directories
    - albums directory
    - tmp directory
    
  * Helper applications
    - unzip
    - zipinfo

  * Graphics
    - Choose a package from the ones available
    - Choose whether to use EXIF or not.
      (the module will decide to draw it from PHP or from
       an external binary)

  * URLs
    - Album URL
    - Gallery URL

  * Gallery config
    - default highlight size
    - movie thumbnail file

  * Mirroring
    - mirror sites

  * Advanced
    - expected exec status
    - session var

  * Defaults
    - border color, border, font, cols, rows, thumb_size, resize_size,
      use_fullOnly, print_photos, returnTo, showOwners,
      albumsPerPage, showSearchEngine, useOriginalFileNames,
      display_clicks, public_comments, layout

QUESTION - should a given skin advertise its configurable properties?
Or are these properties generic and forced upon all skins?

Note that these modules include everything from the v1.2 branch.
The modules should be able to read their starting values from the
config data and write their results to the new config file.  

Each of the input requests should have an explanation of what it's
for, and at least 1 example of a properly formatted input value.

All input values should be validated at every step of the way.
Example validations:
  * Some directories need to be writeable (tmp dir)
  * Some files need to be executable (unzip, etc)
  * Some entries are optional (unzip, etc)
  * Some entries are files/directories which will be entered in
    platform specific style by the user and need to be converted to
    platform neutral style for use in Gallery ("\tmp" ==> "/tmp" if
    you're on Win32) 
  * Some entries must be a URL 
  * Some URLs should not have a trailing slash

Any time an entry fails validation, there should be a link to the FAQ
or some other help resource (super important -- we don't want to be
answering emails about this for the rest of our lives).

5. Final stage

Finally, notify the user that their configuration is complete and that
their Gallery is set up properly.  Provide them with information on
how to put Gallery into secure mode and include a link to the new
Gallery.
